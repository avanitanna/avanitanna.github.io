<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://avanitanna.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://avanitanna.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-03T02:36:57+00:00</updated><id>https://avanitanna.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">[Part 1] Unlocking the Power of LLMs for the Cashflow Game</title><link href="https://avanitanna.github.io/blog/2025/cashflow-1/" rel="alternate" type="text/html" title="[Part 1] Unlocking the Power of LLMs for the Cashflow Game"/><published>2025-02-01T00:00:00+00:00</published><updated>2025-02-01T00:00:00+00:00</updated><id>https://avanitanna.github.io/blog/2025/cashflow-1</id><content type="html" xml:base="https://avanitanna.github.io/blog/2025/cashflow-1/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cashflow_game-480.webp 480w,/assets/img/cashflow_game-800.webp 800w,/assets/img/cashflow_game-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/cashflow_game.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As a passionate learners and game enthusiasts, <a href="https://olmeke.github.io/">Marius</a> and I recently took on the challenge of designing an interactive “rat race” workflow of the popular <a href="https://www.richdad.com/classic">Cashflow game</a> by Robert Kiyosaki, author of the iconic book <strong>“Rich Dad, Poor Dad</strong>”. Cashflow is a financial education game that teaches players about investment strategies, asset management, and personal finance.</p> <p>The goal was to leverage the power of large language models (LLMs) to build an interactive, AI-driven Cashflow game experience – which can run on an edge device in a cost effective manner. Through this project, I gained valuable insights into the design and implementation of such workflows.</p> <h4 id="initial-design-and-workflow-concepts">Initial Design and Workflow Concepts</h4> <p>Here’s how we started out by brainstorming and building this agentic workflow:</p> <div class="row"> <div class="col-sm-5 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cashflow-2-480.webp 480w,/assets/img/cashflow-2-800.webp 800w,/assets/img/cashflow-2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/cashflow-2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-7 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cashflow-1-480.webp 480w,/assets/img/cashflow-1-800.webp 800w,/assets/img/cashflow-1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/cashflow-1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> An analyst agent (left). Full agentic workflow for the game (right). </div> <h4 id="game-workflow-breakdown">Game Workflow Breakdown</h4> <p>Initial workflow involved an analyst agent using tools (such as a calculator) to analyze any game decisions. This comes up in many places in the workflow. The workflow for each turn follows the rules/ structure of the game within the “rat race” –</p> <ul> <li>Evaluate shared opportunities (if any) and decide if you want to act on it</li> <li>Decide on bank interactions such as repaying or borrowing</li> <li>Roll the die</li> <li>Resolve various card types - options include deals (small/big, allowing you to buy assets), charity (you can do so if you have the money to, in exchange for more options to roll the die), doodad cards (getting a baby, payday, buying things), and market cards (opportunities that allow you to sell assets)</li> </ul> <p>Analyst agent can analyze decisions and assess your financial situation (managed through a financial statement). It will make a recommendation and the game goes on!</p> <h4 id="challenges-and-insights">Challenges and Insights</h4> <p>Implementing the workflow with Llama 3.2 (via Ollama) revealed critical challenges and design considerations. Caveat: Larger models would have probably done better, but the goal was to develop this solution on edge devices with minimal costs incurred. Attempting to use <a href="https://python.langchain.com/docs/concepts/tool_calling/">tool calling</a> for different card types proved challenging. Direct computation emerged as a more efficient approach. With all the game data (including financial statement) readily available, it became clear that simply presenting information to the LLM could work effectively. Furthermore, not every workflow requires complex agent interactions! This led to reconsidering Agentic vs simple LLM workflow and revisiting the crucial differences between the two.</p> <h4 id="agentic-vs-simple-llm-workflow">Agentic vs. Simple LLM Workflow</h4> <p>An agent architecture would be more suitable when:</p> <ul> <li>LLM needs to plan or explore decision paths for what to do next</li> <li>Complex tool calling is required</li> <li>Control flow isn’t immediately apparent and may need to be decided by the LLM</li> </ul> <p>In this game workflow, the LLM didn’t need to determine program control flow. The game provided all necessary data for decision-making, eliminating the need for an agent-based approach. This realization highlighted a crucial design principle: choose the simplest workflow that effectively solves the problem.</p> <h4 id="key-lessons-learned">Key Lessons Learned</h4> <p>Simplicity Over Complexity: An elaborate agent architecture wasn’t necessary <em>for this particular use case</em>. A streamlined LLM-driven workflow proved more effective.</p> <p>Direct Computation: Handling calculations directly within the workflow maintained system efficiency.</p> <p>Reminder: As the design principle goes, “Keep It Simple, Stupid” (KISS), the simplest solution often works best. So, if you’re working on your own projects or systems, remember that sometimes less really is more. Apply this thinking in your own endeavors and don’t be afraid to reevaluate your approach as you go!</p> <h4 id="workflow-components">Workflow Components</h4> <p>The refined workflow included the following components:</p> <ol> <li> <p><strong>Financial Statement Management</strong>: The game maintains a comprehensive financial statement, tracking the player’s cash, income, expenses, assets, and liabilities. This allows the LLM to make informed recommendations based on the player’s current financial situation.</p> </li> <li> <p><strong>Opportunity Evaluation</strong>: When presented with an investment opportunity (for example, a deal or a shared market opportunity), the player’s details are passed to the LLM, which evaluates the opportunity and provides a recommendation on whether to buy or sell, along with the reasoning behind the decision.</p> </li> <li> <p><strong>Deal Size Recommendation</strong>: The LLM also provides guidance on the appropriate deal size based on the player’s financial position, helping them make informed decisions about the scale of their investments.</p> </li> <li> <p><strong>Charity</strong>: The workflow evaluates whether charity donations are possible using the player’s financial positions and decides if donating to charity is beneficial.</p> </li> <li> <p><strong>No-Deal Scenarios</strong>: The game also handles situations where the player encounters events like payday, downsizing, having a baby, Doodad cards (e.g., you’re buying a TV), or any other no-deal scenarios. The workflow calculates the payments and manages the player’s financial statement.</p> </li> <li> <p><strong>Borrowing/Repayment Decisions</strong>: The workflow includes logic for borrowing/repayment (from/to the bank at a high interest rate) decisions, with the LLM offering recommendations tailored to the player’s financial circumstances.</p> </li> </ol> <p>The project demonstrated the potential of LLMs in creating an interactive Cashflow game experience without the need for a complex agent architecture, highlighting thoughtful system design.</p> <p>If you’re interested in learning more about the implementation details, stay tuned for the second part of this post!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction -- Unlocking the Power of LLMs for the Cashflow Game]]></summary></entry></feed>